{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-bumper","title":"Welcome to Bumper \ud83e\udd16","text":"<p>Bumper is a local replacement for Ecovacs cloud services, allowing your robots and apps to connect entirely within your home network \u2014 without needing access to the original cloud.</p> <p>It supports both XMPP and MQTT-based models transparently.</p> <p>Disclaimer: This project is a work in progress and may contain errors or missing parts. Please refer to the documentation and source code for complete details.</p>"},{"location":"#requirements","title":"\u2699\ufe0f Requirements","text":"<ul> <li>A Wi-Fi enabled Ecovacs robot</li> <li>A server in your local network to run the Bumper services</li> <li>Python (latest version) with uv or Docker</li> <li>A DNS server capable of overriding specific domain queries</li> <li>A client that can connect and control the robot:<ul> <li>The official \"Ecovacs\" or \"Ecovacs Home\" Android/iOS apps (when configured correctly)<ul> <li>See Using Bumper with the official App for mobile setup details.</li> </ul> </li> <li>DeebotUniverse/client.py for command-line control</li> </ul> </li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#1-prepare-your-robot","title":"1. \ud83e\udd16 Prepare your Robot","text":"<ul> <li>Set up your robot using the official Ecovacs app (initial Wi-Fi configuration, registration, etc.)</li> </ul>"},{"location":"#2-set-up-dns","title":"2. \ud83c\udf10 Set up DNS","text":"<ul> <li>Configure your local DNS server to override specific Ecovacs domains.</li> <li>Detailed setup instructions: DNS Setup</li> </ul>"},{"location":"#3-install-and-run-bumper","title":"3. \ud83d\udee0\ufe0f Install and Run Bumper","text":"<ul> <li>Follow the installation and usage instructions in the README.md     or refer to Docker Setup if using Docker.</li> </ul>"},{"location":"#4-certificates","title":"4. \ud83d\udd12 Certificates","text":"<ul> <li>Bumper requires valid certificates to operate.</li> <li>Instructions for manually creating certificates are available here: Create Certificates</li> </ul>"},{"location":"#logs-and-troubleshooting","title":"\ud83d\udccb Logs and Troubleshooting","text":"<p>Bumper writes log files into the <code>/logs</code> directory by default. You can also monitor real-time output:</p> <ul> <li>If running manually: logs appear directly in the terminal.</li> <li>If running via Docker: use <code>docker logs &lt;container-name&gt;</code> to view logs.</li> </ul> <p>For more detailed output and debugging:</p> <ul> <li>Additional debugging can be enabled using environment variables.     See Environment Variables for a list of available debug options.</li> </ul>"},{"location":"#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>How Bumper Works </li> </ul> <p>Happy cleaning! \ud83e\uddf9</p>"},{"location":"origins/","title":"Origins & Credits","text":""},{"location":"origins/#bumper-origins-maintenance","title":"Bumper Origins &amp; Maintenance","text":"<p>The Bumper project was originally created by @torbjornaxelsson in 2017 as a reverse engineering tool to interface with certain EcoVacs robotic vacuums. It successfully reached its initial goal and remained in a stable (but no longer actively maintained) state, with the last update committed in December 2017.</p> <p>In early 2019, @bmartin5692 picked up the project to support newer vacuum models that use updated protocols. His fork introduced key changes and improvements to the original codebase and continued development for several years.</p> <p>Later, @edenhaus forked the project to refactor and modernize large portions of the codebase, aiming to clean up architectural issues, enhance maintainability, and support more recent devices. This fork has since diverged significantly and is now actively maintained as the primary development source going forward.</p>"},{"location":"origins/#current-maintenance","title":"\ud83d\udd27 Current Maintenance","text":"<p>This repository is now the actively maintained version of Bumper. It includes:</p> <ul> <li>Major refactors for stability and code clarity</li> <li>Updated support for newer EcoVacs models and protocols</li> <li>Improved documentation</li> <li>Better compatibility with modern environments</li> </ul>"},{"location":"origins/#legacy-versions","title":"\ud83d\udce6 Legacy Versions","text":"<p>If you're looking for the older versions:</p> <ul> <li>The original 2017 codebase by @torbjornaxelsson is archived.</li> <li>The intermediate development fork by @bmartin5692 is still available.</li> <li>A historical snapshot of the pre-refactor code is preserved as <code>v0.1.0</code> in his fork.</li> </ul> <p>\u26a0\ufe0f That legacy version may still work with some early models (e.g. M81 Pro, N79S), but for all current and future use, this repository is recommended.</p>"},{"location":"configuration/environment/","title":"Environment Variables","text":""},{"location":"configuration/environment/#environment-variables-overview","title":"Environment Variables Overview","text":"<p>Bumper\u2019s behavior can be tailored by setting environment variables before startup. Below is a list of all variables that the Python application reads, grouped by category. Variables not listed here are hardcoded or not configurable via environment.</p>"},{"location":"configuration/environment/#timezone","title":"\u23f0 Timezone","text":"Variable Default Description <code>TZ</code> <code>UTC</code> Timezone for scheduling and log timestamps. Set to any IANA zone, e.g., <code>Europe/Berlin</code>."},{"location":"configuration/environment/#feature-flags","title":"\u2699\ufe0f Feature Flags","text":"Variable Default Description <code>CA_CERT_API_ONLY_BUMPER_CERT</code> <code>False</code> If <code>true</code>, only the self-signed CA is served. If <code>false</code>, the bundle includes both the self-signed CA and the original system CA."},{"location":"configuration/environment/#paths-files","title":"\ud83d\udcc1 Paths &amp; Files","text":"Variable Default Description <code>BUMPER_DATA</code> <code>$PWD/data</code> Directory for persistent data (database, caches). <code>DB_FILE</code> <code>${BUMPER_DATA}/bumper.db</code> Path to SQLite database file. Overrides default. <code>BUMPER_CERTS</code> <code>$PWD/certs</code> Directory for TLS certificate files. <code>BUMPER_CA</code> <code>ca.crt</code> Filename of CA certificate inside <code>BUMPER_CERTS</code>. <code>BUMPER_CERT</code> <code>bumper.crt</code> Filename of server certificate inside <code>BUMPER_CERTS</code>. <code>BUMPER_KEY</code> <code>bumper.key</code> Filename of server private key inside <code>BUMPER_CERTS</code>."},{"location":"configuration/environment/#authentication","title":"\ud83d\udd12 Authentication","text":"Variable Default Description <code>TOKEN_JWT_ALG</code> <code>ES256</code> JWT algorithm to be used, depends on the bumper certificate you create."},{"location":"configuration/environment/#networking","title":"\ud83c\udf10 Networking","text":"Variable Default Description <code>BUMPER_LISTEN</code> Auto-detected via system DNS IP address or hostname to bind all server listeners (Web, MQTT, XMPP). <code>BUMPER_ANNOUNCE_IP</code> <code>${BUMPER_LISTEN}</code> IP advertised to robots. If <code>0.0.0.0</code>, set explicitly. <code>WEB_SERVER_HTTPS_PORT</code> <code>443</code> Port for HTTPS web UI."},{"location":"configuration/environment/#logging-debugging","title":"\ud83d\udea6 Logging &amp; Debugging","text":"Variable Default Description <code>DEBUG_BUMPER_LEVEL</code> <code>INFO</code> Log level (<code>NOTSET</code>,<code>DEBUG</code>,<code>INFO</code>,<code>WARNING</code>,<code>ERROR</code>,<code>CRITICAL</code>). <code>DEBUG_BUMPER_VERBOSE</code> <code>1</code> Verbose output per log line (integer <code>0</code>,<code>1</code>,<code>2</code>). <code>DEBUG_LOGGING_API_REQUEST</code> <code>False</code> Log incoming API requests. <code>DEBUG_LOGGING_API_REQUEST_MISSING</code> <code>False</code> Log missing API parameters/details. <code>DEBUG_LOGGING_XMPP_REQUEST_ORIGINAL</code> <code>False</code> Log XMPP request before internal changed. <code>DEBUG_LOGGING_XMPP_REQUEST_REFACTORED</code> <code>False</code> Log XMPP request after internal changed. <code>DEBUG_LOGGING_XMPP_RESPONSE</code> <code>False</code> Log XMPP server responses. <code>DEBUG_LOGGING_SA_RESULT</code> <code>False</code> Log service-autonomy outputs from API requests by <code>/sa</code>."},{"location":"configuration/environment/#proxy-forwarding","title":"\ud83d\udd17 Proxy &amp; Forwarding","text":"Variable Default Description <code>BUMPER_PROXY_MQTT</code> <code>False</code> Enable built\u2011in MQTT proxy functionality. <code>BUMPER_PROXY_WEB</code> <code>False</code> Enable built\u2011in HTTP proxy functionality."},{"location":"configuration/environment/#docker-compose-swarm-variables","title":"\ud83d\udea2 Docker Compose &amp; Swarm Variables","text":"<p>These additional environment variables are used in the <code>docker-compose.yml</code> and Swarm stack to control service deployment and container behavior.</p> Variable Default Description <code>NODE_ROLE</code> <code>manager</code> Docker Swarm role constraint for service placement (<code>manager</code> or <code>worker</code>). <code>NETWORK_MODE</code> <code>bridge</code> Docker network driver (<code>bridge</code> or <code>overlay</code>). <code>RESOURCES_LIMITS_CPUS</code> <code>0.25</code> CPU limit per container. <code>RESOURCES_LIMITS_MEMORY</code> <code>250m</code> Memory limit per container. <code>RESOURCES_RESERVATIONS_CPUS</code> <code>0.001</code> CPU reservation per container. <code>RESOURCES_RESERVATIONS_MEMORY</code> <code>32m</code> Memory reservation per container. <code>VERSION_BUMPER</code> <code>develop</code> Bumper image tag to deploy (branch, release, or tag). <code>VERSION_NGNIX</code> <code>1.27.4-alpine3.21-slim</code> NGINX image tag for the reverse proxy. <code>TZ</code> <code>Europe/Berlin</code> Timezone inside containers (binds to host timezone). <code>BUMPER_ANNOUNCE_IP</code> required IP address advertised to robots. Falls back to auto-detection if unset. <code>BUMPER_LISTEN</code> <code>0.0.0.0</code> Bind interface inside the container for Bumper listeners. <code>BUMPER_DEBUG_LEVEL</code> <code>INFO</code> Logging level inside containers. <code>BUMPER_DEBUG_VERBOSE</code> <code>1</code> Verbose log output level inside containers."},{"location":"development/dev-guide/","title":"Development Guide","text":""},{"location":"development/dev-guide/#development-guide","title":"Development Guide","text":"<p>This guide covers setting up a local development environment, running the application, and maintaining code quality.</p>"},{"location":"development/dev-guide/#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<ul> <li>Python 3.13.x installed</li> <li>Git</li> </ul>"},{"location":"development/dev-guide/#setup-local-environment","title":"\ud83d\udee0\ufe0f Setup Local Environment","text":"<p>Step 1 \u2013 Clone the repository</p> <pre><code>$git clone https://github.com/MVladislav/bumper.git\n$cd bumper\n</code></pre> <p>Step 2 \u2013 Create and activate virtual environment, install uv</p> <pre><code>$python3 -m venv .venv\n$source .venv/bin/activate\n$python3 -m pip install uv\n</code></pre> <p>Step 3 \u2013 Install project dependencies</p> <pre><code>$uv sync --all-groups --upgrade\n</code></pre>"},{"location":"development/dev-guide/#running-the-application","title":"\ud83d\ude80 Running the Application","text":"<pre><code>$./scripts/create_cert.sh\n$WEB_SERVER_HTTPS_PORT=8443 uv run bumper\n</code></pre> <p>The web UI will be available at <code>https://127.0.1.1:8443</code> by default.</p>"},{"location":"development/dev-guide/#code-quality-and-testing","title":"\u2705 Code Quality and Testing","text":""},{"location":"development/dev-guide/#linting-static-analysis","title":"Linting &amp; Static Analysis","text":"<p>Run pre-commit hooks</p> <pre><code>$pre-commit run --all-files\n</code></pre> <p>Type checking with mypy</p> <pre><code>$uv run --frozen mypy bumper/\n</code></pre> <p>Linting with pylint</p> <pre><code>$uv run --frozen pylint bumper/\n</code></pre>"},{"location":"development/dev-guide/#unit-tests","title":"Unit Tests","text":"<p>Run tests</p> <pre><code>$uv run pytest tests\n</code></pre> <p>Tests with coverage report</p> <pre><code>$uv run pytest --cov=./ tests --cov-report xml --junitxml=pytest-report.xml\n</code></pre> <p>Generate HTML coverage report</p> <pre><code>$uv run pytest --cov=./ tests --cov-report html:tests/report\n</code></pre> <p>The HTML report is located at <code>tests/report/index.html</code>.</p>"},{"location":"development/dev-guide/#understanding-the-code","title":"\ud83d\udcd6 Understanding the Code","text":"<p>Refer to the How It Works guide for an overview of the core architecture and data flows.</p>"},{"location":"development/dev-guide/#contributing-changes","title":"\ud83e\udd1d Contributing Changes","text":"<ol> <li>Fork the repo and create a feature branch.</li> <li>Follow the setup and testing steps above.</li> <li>Commit changes with clear messages and update tests.</li> <li>Open a pull request against <code>main</code>, ensuring all checks pass.</li> </ol> <p>See CONTRIBUTING.md for detailed contribution guidelines.</p>"},{"location":"getting_started/certificates/","title":"Certificate Setup","text":""},{"location":"getting_started/certificates/#generating-certificates-for-bumper","title":"Generating Certificates for Bumper","text":"<p>The <code>scripts/create-cert.sh</code> helper will generate all necessary certificates into the <code>certs/</code> directory for both Bumper and mitmproxy.</p>"},{"location":"getting_started/certificates/#script-location-overview","title":"\ud83d\udcc2 Script Location &amp; Overview","text":"<ul> <li>Path: <code>scripts/create-cert.sh</code></li> <li>Purpose:<ul> <li>Create a root CA (<code>ca.key</code> + <code>ca.crt</code>)</li> <li>Issue a server certificate (<code>bumper.key</code> + <code>bumper.crt</code>)</li> <li>Produce a combined PEM (<code>ca.pem</code>) for mitmproxy by merging CA and server certs</li> </ul> </li> </ul> <p>If you already possess your own certs, simply place them in <code>certs/</code>:</p> <ul> <li><code>ca.crt</code>, <code>bumper.key</code>, <code>bumper.crt</code> for Bumper</li> <li><code>ca.pem</code> for mitmproxy</li> </ul>"},{"location":"getting_started/certificates/#execute-the-script","title":"\ud83d\ude80 Execute the Script","text":"<pre><code>$./scripts/create-cert.sh\n</code></pre> <p>On success, the <code>certs/</code> directory contains:</p> <ul> <li><code>ca.key</code>\u00a0\u00a0\u2013 Root CA private key</li> <li><code>ca.crt</code>\u00a0\u00a0\u2013 Root CA certificate</li> <li><code>bumper.key</code>\u00a0\u2013 Server private key</li> <li><code>bumper.crt</code>\u00a0\u2013 Server certificate</li> <li><code>ca.pem</code>\u00a0\u00a0\u2013 Combined CA+server cert (for mitmproxy)</li> </ul> <p>The script skips existing files to protect your keys.</p>"},{"location":"getting_started/certificates/#using-certificates","title":"\u2699\ufe0f Using Certificates","text":""},{"location":"getting_started/certificates/#bumper-application","title":"Bumper Application","text":"<p>Configure Bumper to load certificates (defaults shown):</p> <pre><code>BUMPER_CERTS=certs\nBUMPER_CA=ca.crt\nBUMPER_CERT=bumper.crt\nBUMPER_KEY=bumper.key\n</code></pre> <p>Or point directly to full paths:</p> <pre><code>BUMPER_CA_PATH=certs/ca.crt\nBUMPER_CERT_PATH=certs/bumper.crt\nBUMPER_KEY_PATH=certs/bumper.key\n</code></pre>"},{"location":"getting_started/certificates/#mitmproxy","title":"mitmproxy","text":"<p>Mount <code>ca.pem</code> into your mitmproxy container or CLI:</p> <pre><code>$docker run --rm -it \\\n  -v $PWD/certs/ca.pem:/home/mitm/ca.pem:ro \\\n  mitmproxy/mitmproxy mitmweb \\\n    --certs '*=/home/mitm/ca.pem'\n</code></pre>"},{"location":"getting_started/certificates/#python-configuration-advanced","title":"\ud83d\udc0d Python Configuration (Advanced)","text":"<p>Bumper\u2019s Python <code>Config</code> class reads these env vars if set:</p> Variable Default Description <code>BUMPER_CERTS</code> <code>./certs</code> Certificates directory <code>BUMPER_CA</code> <code>ca.crt</code> CA cert filename <code>BUMPER_CERT</code> <code>bumper.crt</code> Server cert filename <code>BUMPER_KEY</code> <code>bumper.key</code> Server key filename <p>Note: <code>ca.pem</code> is only needed by mitmproxy; Bumper uses individual CRT/KEY files.</p>"},{"location":"getting_started/dns/","title":"DNS Setup","text":""},{"location":"getting_started/dns/#dns-configuration-for-bumper","title":"DNS Configuration for Bumper","text":"<p>To intercept and redirect traffic from Ecovacs robots and the official app to your local Bumper server, configure your network\u2019s DNS resolver to override specific Ecovacs domains to your server\u2019s IP.</p>"},{"location":"getting_started/dns/#recommended-opnsense-unbound-dns","title":"\ud83d\udd27 Recommended: OPNsense + Unbound DNS","text":"<p>If you're using OPNsense as your router/firewall, Unbound DNS is the default resolver. Override domain resolution by adding Host Overrides:</p> <ol> <li>Login to the OPNsense web interface.</li> <li>Navigate to Services \u2192 Unbound DNS \u2192 Overrides.</li> <li>Under Host Overrides, click Add and set:<ul> <li>Host: <code>*</code></li> <li>Domain: <code>ecouser.net</code></li> <li>IP: <code>&lt;BUMPER_SERVER_IP&gt;</code> (e.g. <code>192.168.1.100</code>)</li> </ul> </li> <li>Repeat for each domain pattern:<ul> <li><code>*.ecouser.com</code></li> <li><code>*.ecovacs.com</code></li> <li><code>*.ecouser.net</code></li> <li><code>*.ecovacs.net</code></li> </ul> </li> <li>Click Apply to reload Unbound.</li> </ol> <p>These wildcard entries catch all subdomains under the specified domain.</p>"},{"location":"getting_started/dns/#alternative-dnsmasq-pi-hole","title":"\ud83d\udce6 Alternative: dnsmasq / Pi-hole","text":"<p>If you're using DNSMasq directly or via Pi-hole, create a custom config file:</p> <pre><code>/etc/dnsmasq.d/02-bumper.conf\n</code></pre> <pre><code>address=/ecouser.com/&lt;BUMPER_SERVER_IP&gt;\naddress=/ecouser.net/&lt;BUMPER_SERVER_IP&gt;\naddress=/ecovacs.com/&lt;BUMPER_SERVER_IP&gt;\naddress=/ecovacs.net/&lt;BUMPER_SERVER_IP&gt;\n</code></pre> <p>Replace <code>&lt;BUMPER_SERVER_IP&gt;</code> with your server\u2019s local IP (e.g. <code>192.168.1.100</code>).</p> <p>Apply changes:</p> <ul> <li>dnsmasq: <code>sudo systemctl reload dnsmasq</code></li> <li>Pi-hole: <code>pihole restartdns</code> or via the web UI</li> </ul>"},{"location":"getting_started/dns/#notes-on-domain-patterns","title":"\ud83d\udccb Notes on Domain Patterns","text":"<p>If overriding DNS for top-level domains (like <code>*.ecovacs.com</code>) isn\u2019t supported in your DNS setup, you\u2019ll need to manually configure your router or DNS resolver to forward each relevant subdomain used by the app or robot to your Bumper server.</p> <p>EcoVacs robots and the companion app connect to a variety of domains depending on the country or region selected during setup. The Bumper project doesn\u2019t care which exact domain is used\u2014as long as the request is forwarded, it will be intercepted correctly.</p> <p>\ud83e\udde0 The app dynamically retrieves its domain list from the endpoint: <code>https://{region}.ecouser.net/api/appsvr/service/list</code> This means the required domains may vary across models, regions, and firmware versions.</p>"},{"location":"getting_started/dns/#replacement-examples","title":"Replacement Examples","text":"<p>Most domains follow patterns based on country or region codes:</p> <ul> <li><code>{countrycode}</code><ul> <li>If you see <code>eco-{countrycode}-api.ecovacs.com</code> and you're in the US or North America, it would be:     <code>eco-us-api.ecovacs.com</code></li> <li>Note: <code>{countrycode}</code> may also be general region codes like <code>EU</code>, <code>WW</code>, or <code>CN</code>.</li> </ul> </li> <li><code>{region}</code><ul> <li>If you see <code>portal-{region}.ecouser.net</code> and you're in North America, use:     <code>portal-na.ecouser.net</code></li> <li>Note: <code>{region}</code> values may also include <code>eu</code>, <code>cn</code>, or <code>ww</code>.</li> </ul> </li> </ul>"},{"location":"getting_started/dns/#summary","title":"Summary","text":"<ul> <li>\u2705 If your DNS supports wildcard or full-domain overrides, use them to catch all subdomains at once.</li> <li>\u274c If it does not, you must manually define each used domain/subdomain to ensure proper redirection.</li> </ul>"},{"location":"getting_started/dns/#known-domains","title":"\ud83d\udca1 Known Domains","text":"Address Description <code>lb-{countrycode}.ecovacs.net</code> Load-balancer checked by the app/robot <code>lb-{countrycode}.ecouser.net</code> Load-balancer checked by the app/robot <code>lbus.ecouser.net</code> Load-balancer checked by the app/robot <code>lb{countrycode}.ecouser.net</code> Load-balancer checked by the app/robot <code>eco-{countrycode}-api.ecovacs.com</code> Used for login <code>gl-{countrycode}-api.ecovacs.com</code> Used by EcoVacs Home app <code>gl-{countrycode}-openapi.ecovacs.com</code> Used by EcoVacs Home app <code>portal.ecouser.net</code> Used for login and REST API <code>portal-{countrycode}.ecouser.net</code> Used for login and REST API <code>portal-{region}.ecouser.net</code> Used for login and REST API <code>portal-ww.ecouser.net</code> Used for various REST APIs <code>msg-{countrycode}.ecouser.net</code> Used for XMPP <code>msg-{region}.ecouser.net</code> Used for XMPP <code>msg-ww.ecouser.net</code> Used for XMPP <code>mq-{countrycode}.ecouser.net</code> Used for MQTT <code>mq-{region}.ecouser.net</code> Used for MQTT <code>mq-ww.ecouser.net</code> Used for MQTT <code>recommender.ecovacs.com</code> Used by EcoVacs Home app <code>bigdata-international.ecovacs.com</code> Telemetry/tracking <code>bigdata-northamerica.ecovacs.com</code> Telemetry/tracking <code>bigdata-europe.ecovacs.com</code> Telemetry/tracking <code>bigdata-{unknown regions}.ecovacs.com</code> Telemetry/tracking <code>api-app.ww.ecouser.net</code> App v2+ API <code>api-app.dc-{region}.ww.ecouser.net</code> App v2+ API <code>users-base.dc-{region}.ww.ecouser.net</code> App v2+ accounts <code>jmq-ngiot-{region}.dc.ww.ecouser.net</code> App v2+ MQTT <code>api-rop.dc-{region}.ww.ecouser.net</code> App v2+ API <code>jmq-ngiot-{region}.area.ww.ecouser.net</code> App v2+ MQTT"},{"location":"getting_started/dns/#domains-with-known-ips","title":"Domains with Known IPs","text":"Domain IP Port api-app.dc-as.ww.ecouser.net 13.213.212.149 443 api-app.dc-eu.ww.ecouser.net 52.58.74.156 443 api-app.ww.ecouser.net 52.58.74.156 443 portal-ww.ecouser.net 3.68.172.231 443 users-base.dc-eu.ww.ecouser.net 52.58.74.156 443 jmq-ngiot-eu.dc.ww.ecouser.net 3.127.110.57 8883 msg-eu.ecouser.net 18.196.130.16 5223 api-base.robotww.ecouser.net 13.56.199.251 443 gl-de-api.ecovacs.com 3.123.55.28 443 gl-de-api.ecovacs.com 52.58.23.18 443 gl-de-openapi.ecovacs.com 3.123.55.28 443 gl-us-api.ecovacs.com 52.10.83.13 443 gl-us-api.ecovacs.com 54.186.31.147 443 gl-us-pub.ecovacs.com 108.138.7.23 443 gl-us-pub.ecovacs.com 108.138.7.64 443 gl-us-pub.ecovacs.com 13.224.222.120 443 recommender.ecovacs.com 116.62.93.217 443 sa-eu-datasink.ecovacs.com 18.193.135.83 443 sa-eu-datasink.ecovacs.com 3.123.96.17 443 site-static.ecovacs.com 13.32.27.60 443 living-account.eu-central-1.aliyuncs.com 8.211.2.91 443 sgp-sdk.openaccount.aliyun.com 8.219.176.88 443"},{"location":"getting_started/dns/#current-domains-with-tls-errors","title":"Current Domains with TLS Errors","text":"Domain IP Port a2JaaxoKXLq.iot-as-mqtt.cn-shanghai.aliyuncs.com 106.14.207.159 jmq-ngiot-na.dc.robotww.ecouser.net 184.72.41.195 jmq-ngiot-eu.dc.robotww.ecouser.net 63.176.16.162 public.itls.eu-central-1.aliyuncs.com 8.209.119.138 <p>\ud83e\udde9 This list will grow as more regions and device behaviors are observed. Monitor DNS traffic if your robot or app isn\u2019t connecting as expected.</p>"},{"location":"getting_started/dns/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":"<ul> <li>App won\u2019t connect: Test overrides with <code>dig</code> or <code>nslookup</code> against your DNS server.</li> <li>Partial redirects: Clear device DNS cache or reboot.</li> <li>IPv6 issues: If your network uses IPv6, add AAAA records as well.</li> </ul>"},{"location":"getting_started/dns/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>OPNsense Unbound Host Overrides</li> <li>dnsmasq address configuration</li> <li>Pi-hole documentation</li> </ul>"},{"location":"internals/architecture/","title":"Architecture","text":""},{"location":"internals/architecture/#how-it-works","title":"How It Works","text":"<p>\u26a0\ufe0f Disclaimer: This document is a work in progress and may contain inaccuracies or incomplete sections. Some parts serve as placeholders and require further refinement. Please refer to the source code for authoritative information, and feel free to submit corrections or improvements.</p> <p>Bumper recreates Ecovacs\u2019s central cloud services locally, so your robots and app work seamlessly within your network. It supports both XMPP and MQTT protocols.</p> <p></p>"},{"location":"internals/architecture/#services","title":"\ud83e\udde9 Services","text":"Service Description Ports Module Path Web Server Handles discovery, login, REST API for commands and status 443, 8007 <code>bumper.web.server</code> XMPP Server Relays XML stanzas between client and robot over XMPP 5223 <code>bumper.xmpp.xmpp</code> MQTT Broker Manages MQTT topics for telemetry and commands 1883, 8883 <code>bumper.mqtt.server</code>"},{"location":"internals/architecture/#app-authentication","title":"\ud83d\udd12 App / Authentication","text":"<p>The official Ecovacs cloud authenticates users and binds robots to accounts, enabling control via the app. Bumper implements this flow locally:</p> <ol> <li>Discovery Endpoint<ul> <li>Robot issues HTTPS GET to <code>lbo.ecovacs.net:8007</code> for service addresses.</li> <li>App uses the same endpoint for initial configuration.</li> </ul> </li> <li>Login API<ul> <li>App encrypts credentials with Ecovacs\u2019s public key and POSTs to <code>/api/login</code>.</li> <li>Bumper accepts payloads and returns a session token (JWT).</li> </ul> </li> <li>Session Management<ul> <li>The token is sent in cookies or headers on subsequent REST calls.</li> <li>Robots have no built\u2011in auth: once on Wi\u2011Fi, they connect using the stored announce IP without re\u2011authenticating.</li> </ul> </li> </ol> <p>Note: True E2E encryption isn\u2019t possible without Ecovacs\u2019s private key. Bumper fakes this step to maintain compatibility.</p>"},{"location":"internals/architecture/#login-authentication-rest-api","title":"\ud83d\udd12 Login / Authentication / REST API","text":"<p>Bumper\u2019s Web Server module simulates the Ecovacs cloud\u2019s REST API for login and command routing:</p> <ul> <li>Discovery: Robots and the mobile app retrieve service endpoints (XMPP broker or MQTT server addresses) via HTTPS requests to the discovery URL exposed on ports 443/8007.</li> <li>Authentication: The app submits encrypted credentials; Bumper accepts the payload and establishes a session internally, returning a token or cookie to authorize subsequent calls.</li> <li>Command Routing: When the app issues a command (e.g., start cleaning), it makes a REST call against Bumper\u2019s web service. The request is enqueued and handed off to the MQTT helper or forwarded to the XMPP server, depending on the robot\u2019s protocol.</li> <li>Status Queries: The app can poll for the robot\u2019s latest state via REST endpoints, which query the latest telemetry stored by Bumper.</li> </ul> <p>These paths mirror the patterns used by the official servers, ensuring the app functions unmodified.</p>"},{"location":"internals/architecture/#xmpp-protocol","title":"\ud83d\udd17 XMPP Protocol","text":"<p>Example Models: Ozmo 601, Ozmo 930</p> <ol> <li>Discovery<ul> <li>Robot and app request XMPP server info from <code>/discover</code>.</li> <li>Bumper returns its own hostname/IP for XMPP.</li> </ul> </li> <li>Connection<ul> <li>Both robot and app open TLS on port <code>5223</code> to Bumper\u2019s XMPP Server.</li> </ul> </li> <li>Message Relay<ul> <li>Bumper maintains separate sessions for each side and forwards XML stanzas.</li> <li>Commands (e.g., start/stop) and status (e.g., battery) are exchanged as XMPP messages.</li> </ul> </li> <li>Keep\u2011Alive<ul> <li>Bumper responds to XMPP pings and sends heartbeats to prevent timeouts.</li> </ul> </li> </ol> <p>Tip: The Ecovacs app attempts XMPP first; if no valid messages, it falls back to MQTT models.</p>"},{"location":"internals/architecture/#mqtt-protocol","title":"\u2601\ufe0f MQTT Protocol","text":"<p>Example Models: Deebot 600, 900, 901, Ozmo 950</p> <ol> <li>Broker Connection<ul> <li>Robot connects to Bumper\u2019s MQTT Broker on <code>8883</code> (TLS) or <code>1883</code> (plain).</li> <li>Subscribes to <code>p2p/&lt;device_id&gt;</code> for incoming commands.</li> </ul> </li> <li>Telemetry Publishing<ul> <li>Robot publishes JSON status (battery, location) to <code>attr/&lt;device_id&gt;</code> at intervals.</li> </ul> </li> <li>Command Delivery<ul> <li>App issues <code>POST /api/command</code> to Web Server.</li> <li>Web Server forwards the command to the Helper Bot.</li> <li>Helper Bot publishes the command to <code>p2p/&lt;device_id&gt;</code>.</li> </ul> </li> <li>Response Handling<ul> <li>Robot executes the command and publishes results back to <code>p2p/&lt;device_id&gt;</code> or <code>rsp/&lt;device_id&gt;</code>.</li> <li>Helper Bot captures responses and makes them available via REST for the app.</li> </ul> </li> </ol>"},{"location":"internals/architecture/#helper-bot","title":"\u2699\ufe0f Helper Bot","text":"<ul> <li>An internal MQTT client that bridges REST API calls to MQTT topics.</li> <li>Authenticates with the same JWT and listens on command topics.</li> <li>Correlates request/response pairs by message ID for REST replies.</li> </ul> <p>For further details, see the source modules in <code>bumper/web/server.py</code>, <code>bumper/xmpp/xmpp.py</code>, and <code>bumper/mqtt/server.py</code>.</p>"},{"location":"internals/certificate-unpinning-app/","title":"Certificate Pinning Bypass (APP)","text":""},{"location":"internals/certificate-unpinning-app/#defeating-certificate-pinning-in-the-ecovacs-home-app","title":"Defeating Certificate Pinning in the Ecovacs Home App","text":"<p>This guide covers methods to bypass certificate pinning in the Ecovacs Home Android application, enabling HTTPS interception for local Bumper usage.</p> <p>Disclaimer: Modifying the Ecovacs app may break future updates. Proceed at your own risk.</p>"},{"location":"internals/certificate-unpinning-app/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Automated Script<ul> <li>Docker (for building and running the patching container)</li> <li>Android SDK platform-tools (<code>adb</code> in your PATH)</li> <li>CA certificate at <code>./certs/ca.crt</code> (see Create Certificates)</li> </ul> </li> <li>Manual apk-mitm Method<ul> <li>Node.js &amp; npm</li> <li>Java JDK</li> <li>Android SDK platform-tools (<code>adb</code>)</li> <li><code>apk-mitm</code> (install via <code>npm install -g apk-mitm</code>)</li> </ul> </li> <li>Manual apktool Method<ul> <li><code>apktool</code> (for decompile/recompile)</li> <li><code>keytool</code> and <code>apksigner</code> (part of Java JDK or Android build-tools)</li> <li>Android SDK platform-tools (<code>adb</code>)</li> </ul> </li> </ul>"},{"location":"internals/certificate-unpinning-app/#automated-script","title":"\ud83d\ude80 Automated Script","text":"<p>Bumper includes a Bash script at <code>scripts/create-unpinned-app.sh</code> that automates the XAPK patching process inside Docker.</p>"},{"location":"internals/certificate-unpinning-app/#how-the-script-works","title":"How the Script Works","text":"<p>The script performs these steps internally:</p> <ol> <li> <p>Environment Validation    Checks for <code>docker</code>; warns if <code>adb</code> is missing (skipping host\u2011side install).</p> </li> <li> <p>Configuration    Defines variables for the base Docker image (<code>node:18-slim</code>), the Ecovacs XAPK URL(s), certificate path, and a temporary working directory.</p> </li> <li> <p>Docker Image Build    Constructs a minimal image named <code>apk-mitm-unpin</code> with:</p> <ul> <li>OpenJDK 17 JRE</li> <li><code>apktool</code>, <code>apk-mitm</code>, <code>zip</code>, <code>unzip</code>, <code>curl</code></li> </ul> </li> <li> <p>Download &amp; Unpin    Runs a container mount:</p> <ul> <li>Downloads the XAPK via <code>curl</code> using the defined URL</li> <li>Executes <code>apk-mitm</code> with the mounted CA certificate</li> </ul> </li> <li> <p>Extract &amp; Save    Copies the patched XAPK to <code>./data</code>, extracts APK files under <code>data/apks</code>.</p> </li> <li> <p>Optional ADB Install    If <code>adb</code> is available, installs all APK parts via <code>adb install-multiple</code>.</p> </li> </ol>"},{"location":"internals/certificate-unpinning-app/#running-the-script","title":"Running the Script","text":"<pre><code>$scripts/create-unpinned-app.sh\n</code></pre> <p>On completion, the patched XAPK is saved as <code>data/&lt;original&gt;-patched.xapk</code>. If <code>adb</code> was available, the APK is installed on a connected device.</p>"},{"location":"internals/certificate-unpinning-app/#manual-apk-mitm-method","title":"\ud83d\udd27 Manual apk-mitm Method","text":"<p>This method leverages <code>apk-mitm</code> to patch the XAPK directly.</p> <p>Download original XAPK:</p> <pre><code>$curl -SLo ./data/eco.xapk \\\n  'https://d.apkpure.net/b/XAPK/com.eco.global.app?version=latest'\n</code></pre> <p>Patch with apk-mitm:</p> <pre><code>$apk-mitm './data/eco.xapk' --certificate './certs/ca.crt'\n</code></pre> <p>Extract and install:</p> <pre><code>$unzip -o './data/eco-patched.xapk' -d ./data/apks\n$~/.android/Sdk/platform-tools/adb install-multiple ./data/apks/*.apk\n</code></pre>"},{"location":"internals/certificate-unpinning-app/#manual-apktool-method","title":"\ud83d\udee0\ufe0f Manual apktool Method","text":"<p>Full manual unpack, patch, and re-sign process.</p> <p>1. Download and unpack:</p> <pre><code>$cd ./data\n$APK_URL='https://d.apkpure.net/b/XAPK/com.eco.global.app?version=latest'\n$APK_NAME=\"$(curl -sI -L \"$APK_URL\" | grep -o -E 'filename=\"[^\"]+\"' | cut -d'\"' -f2)\"\n$curl -SL \"$APK_URL\" -o \"$APK_NAME\"\n$unzip \"$APK_NAME\" -d bump &amp;&amp; cd bump\n</code></pre> <p>2. Decode with apktool:</p> <pre><code>$apktool d 'com.eco.global.app.apk' --frame-path /tmp/apktool-framework\n</code></pre> <p>3. Insert network security config:</p> <pre><code>$tee 'com.eco.global.app/res/xml/network_security_config.xml' &gt; /dev/null &lt;&lt;'EOF'\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;debug-overrides&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"system\" /&gt;\n            &lt;certificates src=\"user\" /&gt;\n        &lt;/trust-anchors&gt;\n    &lt;/debug-overrides&gt;\n    &lt;base-config cleartextTrafficPermitted=\"true\"&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"system\" /&gt;\n            &lt;certificates src=\"user\" /&gt;\n        &lt;/trust-anchors&gt;\n    &lt;/base-config&gt;\n&lt;/network-security-config&gt;\nEOF\n</code></pre> <p>4. Rebuild the APK:</p> <pre><code>$apktool b 'com.eco.global.app' --frame-path /tmp/apktool-framework\n$cp 'com.eco.global.app/dist/com.eco.global.app.apk' 'com.eco.global.app.apk'\n</code></pre> <p>5. Sign the APK(s):</p> <pre><code>$keytool -genkey -v -keystore bumper-key.jks -alias bumper-key \\\n    -keyalg RSA -keysize 2048 -validity 10000 \\\n    -storepass 123456 -keypass 123456 \\\n    -dname \"CN=Bumper, OU=Bumper, O=Bumper, L=Home, S=Home, C=EU\"\n\n# NOTE: You need also (re)sign all other apk's\n$~/.android/Sdk/build-tools/36.0.0/apksigner sign \\\n    --ks bumper-key.jks \\\n    --ks-key-alias bumper-key \\\n    --ks-pass pass:123456 \\\n    --key-pass pass:123456 \\\n    --v1-signing-enabled true \\\n    --v2-signing-enabled true \\\n    'com.eco.global.app.apk'\n</code></pre> <p>6. Install on device:</p> <pre><code>$~/.android/Sdk/platform-tools/adb install-multiple *.apk\n</code></pre>"},{"location":"internals/certificate-unpinning-app/#references","title":"\ud83d\udcda References","text":"<ul> <li>https://github.com/niklashigi/apk-mitm</li> <li>https://github.com/APKLab/APKLab</li> <li>https://apktool.org</li> <li>https://github.com/sensepost/objection</li> <li>https://httptoolkit.com/blog/frida-certificate-pinning/</li> </ul> <p>For certificate creation and DNS setup, see Create Certificates and DNS Setup.</p>"},{"location":"internals/certificate-unpinning-bot/","title":"Certificate Pinning Bypass (BOT)","text":""},{"location":"internals/certificate-unpinning-bot/#certificate-unpinning-on-ecovacs-bot","title":"Certificate Unpinning on Ecovacs Bot","text":"<p>\u26a0\ufe0f Disclaimer:</p> <p>Accessing and modifying your Ecovacs bot is risky and may permanently damage your device. These steps will void your warranty, may violate your terms of service, and Ecovacs will likely refuse support for modified devices. Proceed entirely at your own risk!</p> <p>Double check all params. This instruction was tested on bot <code>T10 PLUS</code>. If you have another model, details may differ.</p> <p>This guide explains two approaches to enable your Ecovacs bot to trust a self-signed certificate for use with a self-hosted Bumper server:</p> <ul> <li>Option 1 (Recommended, Safer): Replace certificate files on the bot\u2014no firmware modification required.</li> <li>Option 2 (Advanced): Extract, modify, and reflash the root filesystem for deeper changes.</li> </ul>"},{"location":"internals/certificate-unpinning-bot/#option-1-simple-certificate-replacement","title":"\ud83d\udfe2 Option 1: Simple Certificate Replacement","text":"<p>This method only updates certificate files on the bot. No firmware unpacking or flashing is needed.</p>"},{"location":"internals/certificate-unpinning-bot/#1-start-uart-console-on-host","title":"1. Start UART Console (on host)","text":"<p>Connect to the bot's UART serial port:</p> <p>Adjust parameters as needed:</p> <ul> <li><code>/dev/ttyACM0</code>: your device may differ</li> <li><code>--log ...</code>: optional, remove if you don't want logs</li> </ul> <pre><code>picocom /dev/ttyACM0 --flow n --baud 115200 --log ./b-capture-\"$(date --iso-8601=seconds)\".log\n</code></pre> UART - T10 PLUS UART - EXT-SOURCE"},{"location":"internals/certificate-unpinning-bot/#2-interrupt-boot-and-enter-shell-on-bot","title":"2. Interrupt Boot and Enter Shell (on bot)","text":"<p>On startup, interrupt into <code>Hobot</code> (press any key), then boot with updated <code>bootargs</code>:</p> <pre><code>setenv bootargs ${bootargs} init=/bin/bash\nboot\n</code></pre> Note <p>On some bots you need to hit a specific key mentioned during the boot-up process like: </p><pre><code>Hit key to stop autoboot('CTRL+C'):  0\n</code></pre><p></p> <p>Sometime <code>picocom</code> is not working and in that case you can try <code>minicom</code>. You can keep pressed your key (eg. <code>CTRL+C</code>) during the boot process until it's interropted. </p><pre><code>minicom -D /dev/ttyUSB0 -b 115200\n</code></pre><p></p>"},{"location":"internals/certificate-unpinning-bot/#3-initialize-system-resources-on-bot","title":"3. Initialize System Resources (on bot)","text":"<p>Mount volumes and start required services:</p> <pre><code>export TERM=xterm-256color\nmount -a\n\n/etc/rc.d/pre_boot.sh start\n/etc/rc.d/mount_data.sh start\n/etc/rc.d/post_boot.sh start\n/etc/rc.d/load_ko.sh start\n/etc/rc.d/time_sync.sh start\n</code></pre> Note <p>On some models executing the above commands are failing. In this case you can try to manually mount <code>data</code> by checking the boot logs for the correct partition. During the boot-up the partition table is logged on the console and looks similar to: </p><pre><code>GPT part:  0, name:            uboot, start:0x4000, size:0x2000\nGPT part:  1, name:            trust, start:0x6000, size:0x2000\nGPT part:  2, name:              eco, start:0x8000, size:0x3000\nGPT part:  3, name:          reserve, start:0xb000, size:0x800\nGPT part:  4, name:              sys, start:0xb800, size:0x1000\nGPT part:  5, name:            boot1, start:0xc800, size:0x3000\nGPT part:  6, name:          rootfs1, start:0xf800, size:0x40000\nGPT part:  7, name:            boot2, start:0x4f800, size:0x3000\nGPT part:  8, name:          rootfs2, start:0x52800, size:0x40000\nGPT part:  9, name:             data, start:0x92800, size:0x5b7df\n</code></pre><p></p> <p>Identify the data partition (in the above example, it's on index 9), add 1 to the index, and check if you have a device by <code>ls /dev/rkflash0pX</code> (replace <code>X</code> with your index. In the example below, <code>/dev/rkflash0p10</code>).</p> <p>If the device exists, you can manually mount it with: </p><pre><code>mkdir -p /data\nfsck.ext4 -y /dev/rkflash0p10\nmount -t ext4 -o rw /dev/rkflash0p10 /data\n</code></pre><p></p>"},{"location":"internals/certificate-unpinning-bot/#4-replace-certificates-on-bot","title":"4. Replace Certificates (on bot)","text":"<p>\u2139\ufe0f Note: Certificate changes made in this step may be reverted by a factory reset or firmware update. It is recommended to first connect your bot to the official Ecovacs cloud and complete the initial setup before replacing the certificates. If you ever reset or update the bot, you will need to repeat these certificate replacement steps.</p> <p>After running the above scripts, <code>/data</code> is mounted. You now need to manually update the certificate files on the bot using the UART shell:</p> <ul> <li>On your host, open the following files in a text editor:<ul> <li><code>./certs/ca.crt</code></li> <li><code>./certs/bumper.crt</code></li> </ul> </li> <li>On the bot (UART shell), use an editor like <code>vi</code> or <code>cat &gt;</code> to paste the contents into the correct files:<ul> <li>Overwrite <code>/data/ca.crt</code> with the contents of <code>./certs/ca.crt</code></li> <li>Overwrite <code>/data/ca-certificates/ca.pem</code> with the contents of <code>./certs/ca.crt</code></li> <li>For <code>/data/ca-certificates/ca-certificates.crt</code>, append the contents of <code>./certs/bumper.crt</code> and then <code>./certs/ca.crt</code> to the end of the file (do not remove existing entries; just add these two certs at the end, in this order)</li> </ul> </li> </ul> <p>Tip: You can use <code>vi /data/ca-certificates/ca-certificates.crt</code> and paste at the end, or use <code>cat &gt;&gt; /data/ca-certificates/ca-certificates.crt</code> to append. Make sure to save and exit after pasting.</p> <p>Your bot should now trust your self-signed certificates. Reboot and test connectivity to your Bumper server.</p>"},{"location":"internals/certificate-unpinning-bot/#option-2-full-root-filesystem-modification-advanced","title":"\ud83d\udfe1 Option 2: Full Root Filesystem Modification (Advanced)","text":"<p>\u26a0\ufe0f Not Ready: This section is incomplete and not fully tested. Proceed only if you know what you are doing. More research/reverse engineering is required, especially for step <code>4. Flash Modified Rootfs Back to Bot -&gt; b. Download and Flash on Bot</code>.</p> <p>If the simple method does not work, you may need to modify the root filesystem. This is riskier and can brick your device if done incorrectly.</p>"},{"location":"internals/certificate-unpinning-bot/#1-optional-setup-wifi-on-bot","title":"1. (Optional) Setup WiFi (on bot)","text":"<p>If you need network access on the bot, set up WiFi:</p>"},{"location":"internals/certificate-unpinning-bot/#a-load-wifi-firmware","title":"a. Load WiFi Firmware","text":"<pre><code>/etc/rc.d/wifi.sh start\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#b-connect-to-wifi","title":"b. Connect to WiFi","text":"<p>Replace placeholders with your actual values:</p> <ul> <li><code>&lt;YOUR_SSID&gt;</code></li> <li><code>&lt;YOUR_WIFI_PASSWORD&gt;</code></li> <li><code>&lt;YOUR_BOT_IP&gt;</code> (e.g., 192.168.112.57)</li> <li><code>&lt;YOUR_GATEWAY_IP&gt;</code> (e.g., 192.168.112.1)</li> </ul> <pre><code>mkdir -p /tmp/wpa_ctrl\necho \"ctrl_interface=/tmp/wpa_ctrl\" &gt; /tmp/wpa_supplicant.conf\n\nwpa_passphrase '&lt;YOUR_SSID&gt;' '&lt;YOUR_WIFI_PASSWORD&gt;' &gt;&gt; /tmp/wpa_supplicant.conf\n\nwpa_supplicant -B -i wlan0 -c /tmp/wpa_supplicant.conf -f /tmp/wpa.log -s\nifconfig wlan0 '&lt;YOUR_BOT_IP&gt;' netmask 255.255.255.0 up\nroute add default gw '&lt;YOUR_GATEWAY_IP&gt;'\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#2-create-root-filesystem-dump-on-bot","title":"2. Create Root Filesystem Dump (on bot)","text":""},{"location":"internals/certificate-unpinning-bot/#a-dump-root-filesystem","title":"a. Dump Root Filesystem","text":"<pre><code>dd if=/dev/ubi0_0 of=/tmp/rootfs.img bs=1M\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#b-optional-backup-other-partitions","title":"b. (Optional) Backup Other Partitions","text":"<pre><code>dd if=/dev/ubi1_0 of=/tmp/data.img bs=1M\ndd if=/dev/ubi2_0 of=/tmp/sysinfo.img bs=1M\ndd if=/dev/ubi3_0 of=/tmp/ai_model.img bs=1M\ntar -czf /tmp/data.tar.gz -C /data .\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#c-serve-files-for-download","title":"c. Serve Files for Download","text":"<pre><code>cd / &amp;&amp; httpd -p 8080\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#3-download-and-extract-root-filesystem-dump-on-host","title":"3. Download and Extract Root Filesystem Dump (on host)","text":""},{"location":"internals/certificate-unpinning-bot/#a-download-root-filesystem-to-host","title":"a. Download Root Filesystem to Host","text":"<p>Replace <code>&lt;YOUR_BOT_IP&gt;</code> with your bot's actual IP address.</p> <pre><code>curl -Lo rootfs.img http://&lt;YOUR_BOT_IP&gt;:8080/tmp/rootfs.img\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#b-optional-download-other-partitions-to-host","title":"b. (Optional) Download Other Partitions to Host","text":"<pre><code>curl -Lo data.img http://&lt;YOUR_BOT_IP&gt;:8080/tmp/data.img\ncurl -Lo sysinfo.img http://&lt;YOUR_BOT_IP&gt;:8080/tmp/sysinfo.img\ncurl -Lo ai_model.img http://&lt;YOUR_BOT_IP&gt;:8080/tmp/ai_model.img\ncurl -Lo data.tar.gz http://&lt;YOUR_BOT_IP&gt;:8080/tmp/data.tar.gz\n</code></pre> <p>You can extract or inspect these optional backup partitions with tools like <code>ubireader_extract_files</code>, <code>strings</code>, or <code>unsquashfs</code>:</p> <pre><code>ubireader_extract_files data.img\ncat sysinfo.img | strings\nunsquashfs -d ai_model ./ai_model.img\nmkdir -p data &amp;&amp; tar -xzf ./data.tar.gz -C data\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#c-extract-and-modify-rootfs","title":"c. Extract and Modify Rootfs","text":"<pre><code>unsquashfs -d rootfs ./rootfs.img\n# ... edit rootfs as needed ...\nmksquashfs rootfs rootfs_mod.img -noappend -root-owned -p '/dev d 755 0 0' -p '/dev/console c 600 0 0 5 1'\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#4-flash-modified-rootfs-back-to-bot","title":"4. Flash Modified Rootfs Back to Bot","text":""},{"location":"internals/certificate-unpinning-bot/#a-start-http-server-on-host","title":"a. Start HTTP Server on Host","text":"<pre><code>python3 -m http.server 8080\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#b-download-and-flash-on-bot","title":"b. Download and Flash on Bot","text":"<p>\u26a0\ufe0f Not Ready: This step is not finished. When starting into <code>boot_mode2</code>, the root password is required. Further reverse engineering is needed.</p> <p>Replace <code>&lt;YOUR_HOST_IP&gt;</code> with your host's actual IP address.</p> <pre><code>curl -Lo /data/rootfs_mod.img http://&lt;YOUR_HOST_IP&gt;:8080/rootfs_mod.img\n\nubi_atomic_update_leb /dev/ubi2_0 -i \"boot_mode2\" -n 0\nreboot\n\nubiupdatevol /dev/ubi4_0 /data/rootfs_mod.img\n\nubi_atomic_update_leb /dev/ubi2_0 -i \"boot_mode1\" -n 0\nreboot\n</code></pre>"},{"location":"internals/certificate-unpinning-bot/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Always backup your data before making changes.</li> <li>If unsure, use Option 1 first.</li> <li>For certificate creation, see Create Certificates.</li> <li>For more context, see Architecture and App Certificate Unpinning.</li> </ul>"},{"location":"internals/certificate-unpinning-bot/#references","title":"\ud83d\udcda References","text":"<ul> <li>https://dontvacuum.me/talks/37c3-2023/37c3-vacuuming-and-mowing.pdf</li> <li>https://dontvacuum.me/talks/DEFCON32/DEFCON32_reveng_hacking_ecovacs_robots.pdf</li> <li>https://media.ccc.de/v/37c3-11943-sucking_dust_and_cutting_grass_reversing_robots_and_bypassing_security#t=2028</li> <li>https://github.com/itsjfx/ecovacs-hacking/blob/master/x1_omni.md</li> <li>https://dontvacuum.me/</li> </ul>"},{"location":"internals/sniffing/","title":"Sniffing & Reverse Engineering","text":""},{"location":"internals/sniffing/#android-sniffing-on-ubuntu-with-mitmproxy","title":"Android Sniffing on Ubuntu with mitmproxy","text":"<p>This guide walks you through setting up an Android emulator on Ubuntu, installing a custom CA certificate, and using mitmproxy to intercept traffic. It also includes an optional Python addon for enhanced output filtering.</p>"},{"location":"internals/sniffing/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Ubuntu 22.04+</li> <li>Docker (for running mitmproxy)</li> <li>Android Studio (for emulator and ADB)</li> <li>CA certificate (<code>ca.crt</code> and <code>ca.pem</code>) placed in the <code>./certs/</code> folder<ul> <li>Generate with <code>./scripts/create-cert.sh</code> if you don\u2019t have one</li> </ul> </li> </ul>"},{"location":"internals/sniffing/#install-android-studio-sdk","title":"\ud83d\ude80 Install Android Studio &amp; SDK","text":"<p>Install Android Studio via Snap:</p> <pre><code>$sudo snap install android-studio --classic\n</code></pre> <p>Launch Android Studio and follow the initial setup to install the SDK and platform-tools.</p> <p>Tip: Install the SDK under <code>~/.android/Sdk</code> for consistency.</p>"},{"location":"internals/sniffing/#create-an-emulator","title":"\ud83d\udda5\ufe0f Create an Emulator","text":"<ol> <li>Open AVD Manager (Virtual Device Manager).</li> <li>Click Create Virtual Device.</li> <li>Choose a device (e.g., Pixel\u00a06 Pro) without Google Play Store.</li> <li>Select a system image with API\u00a028 (Android\u00a09 Pie) or lower to allow system CA installation.</li> </ol>"},{"location":"internals/sniffing/#prepare-the-emulator","title":"\ud83d\udd27 Prepare the Emulator","text":"<p>(Optional) Disable Quickboot file-backed feature Reddit Source - fixes BTRFS issues:</p> <pre><code>$echo \"QuickbootFileBacked = off\" &gt;&gt; ~/.android/advancedFeatures.ini\n</code></pre> <p>List available AVDs:</p> <pre><code>$~/.android/Sdk/emulator/emulator -list-avds\n</code></pre> <p>Start the emulator with root access and writable system:</p> <p>replace <code>&lt;AVD_NAME&gt;</code></p> <pre><code>$~/.android/Sdk/emulator/emulator \\\n    -avd &lt;AVD_NAME&gt; \\\n    -writable-system \\\n    -no-boot-anim \\\n    -gpu host \\\n    -cores 4 \\\n    -memory 4096\n</code></pre> <p>Restart ADB as root and remount:</p> <pre><code>$~/.android/Sdk/platform-tools/adb root\n$~/.android/Sdk/platform-tools/adb remount\n</code></pre>"},{"location":"internals/sniffing/#install-the-ca-certificate","title":"\ud83d\udd12 Install the CA Certificate","text":"<p>Push your custom CA into the emulator\u2019s system trust store:</p> <pre><code>$HASH=$(openssl x509 -inform PEM -subject_hash_old -in certs/ca.crt | head -1)\n$~/.android/Sdk/platform-tools/adb push certs/ca.crt \"/system/etc/security/cacerts/${HASH}.0\"\n$~/.android/Sdk/platform-tools/adb reboot\n$~/.android/Sdk/platform-tools/adb wait-for-device\n</code></pre>"},{"location":"internals/sniffing/#install-the-target-app-and-proxy-app","title":"\ud83d\udcf1 Install the Target App and Proxy App","text":""},{"location":"internals/sniffing/#1-install-ecovacs-home-app","title":"1\ufe0f\u20e3 Install Ecovacs Home App","text":"<p>Download and install version <code>2.4.1</code> of the Ecovacs Home APK:</p> <p>If you want to try reversing newer app versions, you'll need to unpin the certificate. See Defeating Certificate Pinning for instructions.</p> <ul> <li>Ecovacs Home on APKPure</li> <li>Ecovacs Home on Aptoide</li> </ul> <pre><code>$~/.android/Sdk/platform-tools/adb install &lt;path/to/Ecovacs_Home_2.4.1.apk&gt;\n</code></pre> <p>Tip: Drag-and-drop the APK onto the emulator window.</p>"},{"location":"internals/sniffing/#2-install-socks5-proxy-app","title":"2\ufe0f\u20e3 Install SOCKS5 Proxy App","text":"<p>Install a SOCKS5 proxy client (e.g., Super Proxy):</p> <ul> <li>Super Proxy on APKPure</li> <li>Super Proxy on Aptoide</li> </ul>"},{"location":"internals/sniffing/#configure-proxy-on-android","title":"\ud83c\udf10 Configure Proxy on Android","text":"<p>In the emulator\u2019s network or proxy app settings:</p> <ul> <li>Protocol: SOCKS5</li> <li>Host: <code>&lt;YOUR_SERVER_IP&gt;</code></li> <li>Port: <code>1080</code></li> </ul> <p>This routes all emulator traffic through mitmproxy.</p>"},{"location":"internals/sniffing/#run-mitmproxy-in-docker-swarm","title":"\u2699\ufe0f Run mitmproxy in Docker-Swarm","text":"<p>From your project root:</p> <p>NOTE: i run my projects in <code>swarm mode</code>, mitm will be started with pre-defined configs inside <code>docker-compose-mitm.yaml</code></p> <pre><code>$docker compose -f docker-compose-mitm.yaml --compatibility config | \\\n  sed 's|cpus: \\([0-9]\\+\\(\\.[0-9]\\+\\)*\\)|cpus: \"\\1\"|' | \\\n  sed '1{/^name:/d}' | \\\n  sed 's/published: \"\\(.*\\)\"/published: \\1/' | \\\n  sed 's|mode: \"\\([0-9]\\+\\)\"|mode: \\1|' | \\\n  docker stack deploy --resolve-image=never --with-registry-auth --detach=false --compose-file - mitm\n</code></pre> <p>Access http://localhost:8081 to inspect traffic.</p>"},{"location":"internals/sniffing/#alternative-local-mitmproxy-docker-run","title":"\ud83d\udc33 Alternative: Local mitmproxy Docker Run","text":"<p>From your project root (where <code>./certs/ca.pem</code> lives):</p> <pre><code>$docker run --rm -it --network host \\\n  -v $PWD/mitm:/home/mitm:ro \\\n  -v $PWD/certs/ca.pem:/tmp/ca.pem:ro \\\n  mitmproxy/mitmproxy mitmweb \\\n    --web-host 0.0.0.0 \\\n    --mode socks5 \\\n    --showhost \\\n    --rawtcp \\\n    --ssl-insecure \\\n    --certs '*=/tmp/ca.pem' \\\n    --set connection_strategy=lazy\n</code></pre> <p>Access http://localhost:8081 to inspect traffic.</p>"},{"location":"internals/sniffing/#optional-python-script-filter","title":"\ud83d\udc0d Optional: Python Script Filter","text":"<p>Use the Python addon at <code>./configs/mitm.py</code> to filter or transform flows:</p> <pre><code>$docker run --rm -it --network host \\\n  -v $PWD/mitm:/home/mitm:ro \\\n  -v $PWD/certs/ca.pem:/tmp/ca.pem:ro \\\n  -v $PWD/configs/mitm.py:/tmp/mitm.py:ro \\\n  mitmproxy/mitmproxy mitmweb \\\n    --web-host 0.0.0.0 \\\n    --mode socks5 \\\n    --showhost \\\n    --rawtcp \\\n    --ssl-insecure \\\n    --certs '*=/tmp/ca.pem' \\\n    --set connection_strategy=lazy \\\n    -s /tmp/mitm.py\n</code></pre> <p>Access http://localhost:8081 to inspect traffic.</p>"},{"location":"internals/sniffing/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":"<ul> <li>SSL errors: Verify the CA hash and placement.</li> <li>Emulator won\u2019t root: Use API\u00a028 or lower with <code>-writable-system</code>.</li> <li>App 2003 errors: Launch the app once without proxy to fetch initial data.</li> </ul>"},{"location":"internals/sniffing/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>mitmproxy MQTT script example</li> <li>Custom CA usage</li> <li>mitmproxy API docs</li> </ul>"},{"location":"usage/cli/","title":"Command-Line Usage","text":""},{"location":"usage/cli/#command-line-usage","title":"Command-Line Usage","text":"<p>Bumper supports several command-line arguments, which you can view by using the <code>-h</code> flag.</p> <p>Note: For more detailed configuration, use environment variables. See Environment Variables.</p> <pre><code>usage: bumper [-h] [--listen LISTEN] [--announce ANNOUNCE] [--debug_level DEBUG_LEVEL] [--debug_verbose DEBUG_VERBOSE]\n\noptions:\n  -h, --help                    Show this help message and exit\n  --listen LISTEN               Start serving on address (default: from socket)\n  --announce ANNOUNCE           Announce address to bots on check-in (default: from --listen)\n  --debug_level DEBUG_LEVEL     Set debug log level (default: \"INFO\")\n  --debug_verbose DEBUG_VERBOSE Enable verbose debug logs (default: 1)\n</code></pre>"},{"location":"usage/docker/","title":"Docker Usage","text":""},{"location":"usage/docker/#docker","title":"Docker","text":"<p>Manage Bumper via Docker\u2014pull the official image, deploy with Compose or Swarm, build custom images, or run directly.</p>"},{"location":"usage/docker/#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<p>Prepare TLS certificates and minimal environment variables before any deployment:</p> <p>TLS certificates:</p> <p>Place your certs in <code>certs/ca.crt</code>, <code>certs/bumper.crt</code>, <code>certs/bumper.key</code>, or generate them:</p> <pre><code>$./scripts/create-cert.sh\n</code></pre> <p>Environment variables:</p> <p>Create a <code>.env</code> file with at least the following:</p> <pre><code>NETWORK_MODE=overlay        # by default \"bridge\"\n\n# Needs to be set when running with Docker; default is auto-detected from socket\nBUMPER_ANNOUNCE_IP=192.168.0.100  # your server's public/local IP\n</code></pre> <p>Full environment variable reference: Environment Variables</p>"},{"location":"usage/docker/#pull-the-official-image","title":"\u2728 Pull the Official Image","text":"<pre><code>$docker pull ghcr.io/mvladislav/bumper:develop\n</code></pre> <p>See the package on GitHub Container Registry here.</p>"},{"location":"usage/docker/#docker-swarm-deployment","title":"\ud83d\ude80 Docker Swarm Deployment","text":"<p>Step 1 \u2013 Clone the repository</p> <pre><code>$git clone https://github.com/MVladislav/bumper.git\n$cd bumper\n</code></pre> <p>Step 2 \u2013 Initiate Docker in Swarm mode</p> <pre><code>$docker swarm init\n</code></pre> <p>Step 3 \u2013 Start services</p> <p>alias for docker-swarm</p> <pre><code>$docker-swarm-compose deebot      # alias for Docker Swarm Compose\n# or\n$docker compose up -d             # standard Docker Compose\n</code></pre> <p>Step 4 \u2013 Access the UI</p> <p>Visit <code>https://ecovacs.net/</code> in your browser.</p>"},{"location":"usage/docker/#build-a-custom-image","title":"\ud83d\udee0 Build a Custom Image","text":"<p>Step 1 \u2013 Clone the repository (if not already done)</p> <pre><code>$git clone https://github.com/MVladislav/bumper.git\n$cd bumper\n</code></pre> <p>Step 2 \u2013 Build</p> <pre><code>$docker build -t mvladislav/bumper .\n</code></pre> <p>Requires Docker \u226517.09 or Podman.</p>"},{"location":"usage/docker/#direct-docker-run","title":"\ud83c\udfaf Direct Docker Run","text":"<p>Step 1 \u2013 Create a Docker volume</p> <pre><code>$docker volume create bumper_data\n</code></pre> <p>(Or use a host directory: <code>-v /path/to/data:/bumper/data</code>.)</p> <p>Step 2 \u2013 Run the container</p> <pre><code>$docker run -it \\\n  --mount source=bumper_data,target=/bumper/data \\\n  -p 443:443 -p 8007:8007 -p 8883:8883 -p 5223:5223 \\\n  --name bumper \\\n  mvladislav/bumper\n</code></pre> <ul> <li>Volumes: uses Docker volume <code>bumper_data</code>; replace with <code>-v /host/path:/bumper/data</code> for a host mount.</li> <li>Ports: 443, 8007, 8883, 5223</li> </ul> <p>For advanced Docker parameters (resource limits, secrets, configs), see the Environment Variables.</p>"},{"location":"usage/mobile_app/","title":"Mobile App Integration","text":""},{"location":"usage/mobile_app/#using-bumper-with-the-official-androidios-app","title":"Using Bumper with the Official Android/iOS App","text":"<p>You can use the official \u201cEcovacs\u201d or \u201cEcovacs Home\u201d app to control your robot via your local Bumper server. This requires:</p> <ul> <li>DNS overrides as described in DNS Configuration.</li> <li>Trusting Bumper\u2019s CA certificate on your device (generated via Create Certificates).</li> </ul> <p>Note: Functionality may vary by app version; some features (e.g., push notifications) depend on cloud services and may not work.</p>"},{"location":"usage/mobile_app/#install-the-bumper-ca-certificate","title":"\ud83d\udd11 Install the Bumper CA Certificate","text":""},{"location":"usage/mobile_app/#ios-ios-10","title":"iOS (iOS\u00a010+)","text":"<ol> <li>Transfer <code>certs/ca.crt</code> (DER format) to your device (e.g., email or AirDrop).</li> <li>Tap the file to open the install prompt.</li> <li>In Settings \u2192 Profile Downloaded, tap Install and enter your passcode.</li> <li>Go to Settings \u2192 General \u2192 About \u2192 Certificate Trust Settings.</li> <li>Enable full trust for Bumper CA.</li> </ol>"},{"location":"usage/mobile_app/#android","title":"Android","text":""},{"location":"usage/mobile_app/#android-7-api-2327","title":"Android &lt; 7 (API 23\u201327)","text":"<p>For older releases, install the CA as a user certificate:</p> <ol> <li>Copy <code>certs/ca.crt</code> to device storage.</li> <li>Go to Settings \u2192 Security \u2192 Install from device storage.</li> <li>Select the cert, name it, and choose VPN and apps.</li> </ol> <p>Tip: If your device or app still rejects the cert, consider pin-bypass or using a rooted device.</p>"},{"location":"usage/mobile_app/#android-9-api-28-and-below","title":"Android \u2264 9 (API 28 and below)","text":"<p>On Android Pie (9) and lower, you can install the CA as a system certificate via <code>adb</code>:</p> <pre><code># Start adb as root\n$adb root\n# Remount /system writable\n$adb remount\n# Push CA into system store\n$adb push certs/ca.crt \"/system/etc/security/cacerts/$(openssl x509 -inform PEM -subject_hash_old -in certs/ca.crt | head -1).0\"\n$adb reboot\n</code></pre> <p>Verify in Settings \u2192 Security \u2192 Trusted credentials \u2192 System.</p> <p>Tip: For emulators, see the Prepare the Emulator section in Android Sniffing.</p>"},{"location":"usage/mobile_app/#android-10-api-29-and-above","title":"Android \u2265 10 (API 29 and above)","text":"<p>Starting with Android 10, user or system CA installation does not work for apps targeting API 29+. You must bypass certificate pinning instead:</p> <ul> <li>Follow the steps in Certificate Pinning Bypass.</li> </ul>"},{"location":"usage/mobile_app/#configure-the-app","title":"\ud83d\udcf2 Configure the App","text":"<ol> <li>Launch Ecovacs Home.</li> <li>On the login screen, enter any email/password (6+ characters).</li> <li>If your robot is bound to Bumper, it appears in the device list.</li> <li>Tap the robot; the app pings it over MQTT or XMPP and opens the control interface.</li> </ol> <p>Note: No real credential validation occurs; Bumper accepts all logins for compatibility.</p>"},{"location":"usage/mobile_app/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":"<ul> <li>No robots found: Confirm DNS overrides and that Bumper is reachable at <code>https://&lt;domain&gt;</code>.</li> <li>Login errors: Ensure your CA is trusted and HTTPS connection succeeds.</li> <li>Missing features: Some cloud-only functions (e.g., map history) are not implemented.</li> </ul>"},{"location":"usage/mobile_app/#see-also","title":"\ud83d\udcd6 See Also","text":"<ul> <li>DNS Configuration</li> <li>Certificate Pinning Bypass</li> <li>How Bumper Works</li> </ul>"}]}