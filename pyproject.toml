[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "bumper"
description = "Deebot Server."
keywords = [
  "home",
  "automation",
  "homeassistant",
  "vacuum",
  "robot",
  "deebot",
  "ecovacs",
  "bumper",
  "server",
]

version = "0.1.4"
requires-python = ">=3.13.0"
readme = "README.md"
license = { text = "GPL-3.0" }

authors = [
  { name = "Brian Martin" },
  { name = "Robert Resch" },
  { name = "MVladislav" },
]

dependencies = [
  "aiodns==3.5.0",        # https://pypi.org/project/aiodns
  "aiofiles==24.1.0",     # https://pypi.org/project/aiofiles
  "aiohttp-jinja2==1.6",  # https://pypi.org/project/aiohttp-jinja2
  "aiohttp==3.12.15",     # https://pypi.org/project/aiohttp
  "aiomqtt==2.4.0",       # https://pypi.org/project/aiomqtt
  "amqtt==0.11.3",        # https://pypi.org/project/amqtt
  "cachetools==6.2.0",    # https://pypi.org/project/cachetools
  "coloredlogs==15.0.1",  # https://pypi.org/project/coloredlogs
  "cryptography==45.0.7", # https://pypi.org/project/cryptography
  "defusedxml==0.8.0rc2", # https://pypi.org/project/defusedxml
  "Jinja2==3.1.6",        # https://pypi.org/project/Jinja2
  "passlib==1.7.4",       # https://pypi.org/project/passlib
  "PyJWT==2.10.1",        # https://pypi.org/project/PyJWT
  "tinydb==4.8.2",        # https://pypi.org/project/tinydb
  "validators==0.35.0",   # https://pypi.org/project/validators
  "websockets==15.0.1",   # https://pypi.org/project/websockets
]

[dependency-groups]
dev = [
  "mypy>=1.16.1",                      # https://pypi.org/project/mypy
  "pre-commit>=4.2.0",                 # https://pypi.org/project/pre-commit
  "pycountry>=24.6.1",                 # https://pypi.org/project/pycountry
  "pylint>=3.3.7",                     # https://pypi.org/project/pylint
  "pytest-aiofiles>=0.2.0",            # https://pypi.org/project/pytest-aiofiles
  "pytest-aiohttp>=1.1.0",             # https://pypi.org/project/pytest-aiohttp
  "pytest-asyncio>=1.0.0",             # https://pypi.org/project/pytest-asyncio
  "pytest-cov>=6.2.1",                 # https://pypi.org/project/pytest-cov
  "pytest-docker-fixtures>=1.4.0",     # https://pypi.org/project/pytest-docker-fixtures
  "pytest-env>=1.1.5",                 # https://pypi.org/project/pytest-env
  "pytest-timeout>=2.4.0",             # https://pypi.org/project/pytest-timeout
  "pytest>=8.4.1",                     # https://pypi.org/project/pytest
  "ruff>=0.12.2",                      # https://pypi.org/project/ruff
  "testfixtures>=9.0.1",               # https://pypi.org/project/testfixtures
  "types-aiofiles>=24.1.0.20250606",   # https://pypi.org/project/types-aiofiles
  "types-cachetools>=6.0.0.20250525",  # https://pypi.org/project/types-cachetools
  "types-mock>=5.2.0.20250516",        # https://pypi.org/project/types-mock
  "types-pillow>=10.2.0.20240822",     # https://pypi.org/project/types-pillow
  "types-setuptools>=80.9.0.20250529", # https://pypi.org/project/types-setuptools
]
docs = [
  "mkdocs-material>=9.6.14", # https://pypi.org/project/mkdocs-material/
  "mkdocs-glightbox>=0.4.0", # https://pypi.org/project/mkdocs-glightbox/
]

[project.scripts]
bumper = "bumper:main"

[tool.hatch.build.targets.sdist]
include = ["/bumper"]

[tool.hatch.build.targets.wheel]
include = ["/bumper"]

[tool.hatch.envs]
default = { dependencies = ["dev"] }

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

# ____________________________________ RUFF ____________________________________
# https://docs.astral.sh/ruff/settings/
[tool.ruff]
line-length = 130
fix = true
extend-exclude = ["docs/"]

[tool.ruff.format]
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]

extend-select = [
  "UP", # pyupgrade
  "D",  # pydocstyle
]

ignore = [
  "ANN401",  # Checks that function arguments are annotated with a more specific type than Any.
  "BLE001",  # Checks for except clauses that catch all exceptions.
  "D107",    # Missing docstring in `__init__`
  "ERA001",  # Checks for commented-out Python code.
  "FBT001",  # Checks for the use of boolean positional arguments in function definitions.
  "FBT002",  # Checks for the use of boolean positional arguments in function definitions.
  "FBT003",  # Checks for boolean positional arguments in function calls.
  "FIX002",  # Checks for "TODO" comments.
  "G004",    # Logging statement uses f-string
  "PLR2004", # Magic value used in comparison, consider replacing 5 with a constant variable
  "RUF001",  # Checks for ambiguous Unicode characters in strings.
  "RUF012",  # Checks for mutable default values in class attributes.
  "TD002",   # Checks that a TODO comment includes an author.
  "TD003",   # Checks that a TODO comment is associated with a link to a relevant issue or ticket.
  "TRY002",  # Checks for code that raises Exception or BaseException directly.
  "TRY300",  # Checks for return statements in try blocks.
  "TRY301",  # Checks for raise statements within try blocks.
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F403", # Checks for the use of wildcard imports.
  "F405", # Checks for names that might be undefined
]
"scripts/**" = ["ALL"]
"tests/**" = [
  "D100",     # Missing docstring in public module
  "D103",     # Missing docstring in public function
  "D104",     # Missing docstring in public package
  "N802",     # Function name {name} should be lowercase
  "N806",     # Variable `userId` in function should be lowercase
  "N816",     # Variable {name} in global scope should not be mixedCase
  "S101",     # Use of assert detected
  "S106",     # Possible hardcoded password assigned to argument: "password_file"
  "SLF001",   # Private member accessed: {access}
  "ANN001",
  "ANN201",
  "ARG001",
  "ASYNC110",
  "INP001",
  "PGH003",
  "PTH107",
  "PTH110",
  "PTH118",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
case-sensitive = true
extra-standard-library = ["typing_extensions"]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pylint]
max-args = 12
max-branches = 25
max-statements = 70
max-returns = 10

# ----------------------------------- PYTEST -----------------------------------
[tool.pytest.ini_options]
addopts = ["--cov=bumper", "--cov-report=term-missing", "--cov-report=xml"]
testpaths = ["tests"]
asyncio_mode = "auto"
timeout = 10
# log_cli = true
# log_level = "INFO"
env = [
  "D:BUMPER_CA=tests/_test_files/certs/ca.crt",
  "D:BUMPER_CERT=tests/_test_files/certs/bumper.crt",
  "D:BUMPER_KEY=tests/_test_files/certs/bumper.key",
  "WEB_SERVER_HTTPS_PORT=8443",
  "DB_FILE=tests/_test_files/tmp.db",
]

asyncio_default_fixture_loop_scope = "function"

# ---------------------------------- COVERAGE ----------------------------------
[tool.coverage.run]
branch = true
source = ["bumper"]

[tool.coverage.report]
show_missing = true
skip_covered = true

# ------------------------------------ MYPY ------------------------------------
[tool.mypy]
exclude = ["^tests/.*", "^docs/.*"]
follow_imports = "silent"
show_error_codes = true
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true
strict = true

# ----------------------------------- PYLINT -----------------------------------
[tool.pylint.MAIN]
jobs = 2
ignore = ["tests"]
fail-on = ["I"]
max-line-length = 130

[tool.pylint.BASIC]
# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "e", "ex", "f", "_", "T", "x", "y", "id", "tg"]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# duplicate-code - unavoidable
# too-many-* - are not enforced for the sake of readability
disable = [
  "duplicate-code",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-ancestors",
  "logging-fstring-interpolation",
  "broad-exception-caught",
  "broad-exception-raised",
  "fixme",
  "import-error",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.REFACTORING]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.DESIGN]
max-branches = 20             # too-many-branches
max-parents = 10
max-positional-arguments = 10 # too-many-positional-arguments
max-returns = 10              # too-many-return-statements
max-statements = 62           # too-many-statements
max-module-lines = 1128       # too-many-lines
